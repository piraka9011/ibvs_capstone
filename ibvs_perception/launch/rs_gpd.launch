<launch>

    <!-- GPD Params -->
    <arg name="device" default="1" doc="target device to execute inference. [0:CPU]|1:GPU|2:VPU|3:FPGA"/>
    <!-- Kinect: /kinect2/qhd/points-->
    <arg name="cloud_topic" default="/camera/depth_registered/points"/>
    <!-- Custom Params -->
    <arg name="filter_cloud_topic" default="/ibvs_perception/filtered_points"/>
    <!-- Kinect: /kinect2/qhd/image_color_rect -->
    <arg name="image_topic" default="/camera/color/image_raw"/>
    <arg name="grasp_topic" default="/ibvs_perception/best_grasp"/>
    <arg name="camera_frame" default="camera_depth_optical_frame"/>
    <arg name="debug" default="false"/>

    <!-- GPD -->
    <!-- Load hand geometry parameters -->
    <include file="$(find gpd)/launch/hand_geometry.launch">
        <arg name="node" value="detect_grasps"/>
    </include>

    <!-- Load classifier parameters -->
    <include file="$(find gpd)/launch/caffe/classifier_15channels.launch">
        <arg name="node" value="detect_grasps"/>
    </include>

    <node name="detect_grasps" pkg="gpd" type="detect_grasps">

        <param name="device" type="int" value="$(arg device)"/>

        <!-- If sequential importance sampling is used (default: false) -->
        <param name="use_importance_sampling" value="false"/>

        <!-- What type of point cloud is used and what ROS topic it comes from -->
        <param name="cloud_type" value="0"/> <!-- 0: PointCloud2, 1: CloudSized, 2: CloudIndexed, 3: CloudSamples -->
        <param name="cloud_topic" value="$(arg filter_cloud_topic)"/>

        <!-- (optional) The ROS topic that the samples come from (default: an empty string) -->
        <param name="samples_topic" value=""/>

        <!-- Plotting parameters -->
        <param name="plot_normals" value="false"/>
        <param name="plot_samples" value="false"/>
        <param name="plot_candidates" value="false"/>
        <param name="plot_filtered_grasps" value="false"/>
        <param name="plot_valid_grasps" value="false"/>
        <param name="plot_clusters" value="false"/>
        <param name="plot_selected_grasps" value="false"/>
        <param name="rviz_topic" value="grasps_rviz"/>

        <!-- Preprocessing of point cloud -->
        <param name="voxelize" value="true"/>
        <param name="remove_outliers" value="false"/>
        <rosparam param="workspace">[-1, 1, -1, 1, 0, 2]</rosparam>
        <rosparam param="camera_position">[0, 0, 0]</rosparam>

        <!-- General parameters -->
        <param name="num_samples" value="100"/>
        <param name="num_threads" value="4"/>

        <!-- Parameters for local grasp candidate search -->
        <param name="nn_radius" value="0.01"/>
        <param name="num_orientations" value="8"/> <!-- Number of orientations to consider -->

        <!-- Filtering of grasp candidates -->
        <param name="filter_grasps" value="false"/> <!-- on workspace and robot hand aperture -->
        <rosparam param="workspace_grasps">[0.55, 1.0, -0.41, 0.03, -0.29, 1.0]</rosparam>
        <param name="filter_half_antipodal" value="false"/> <!-- on half antipodal -->

        <!-- Grasp image creation -->
        <param name="create_image_batches" value="false"/> <!-- creates grasp images in batches (less memory usage) -->
        <param name="remove_plane_before_image_calculation"
               value="false"/> <!-- removes table plane from point cloud to speed up shadow computations -->

        <!-- Clustering of grasps -->
        <param name="min_inliers" value="1"/>

        <!-- Grasp selection -->
        <param name="min_score_diff" value="0"/>
        <param name="min_aperture" value="0.029"/>
        <param name="max_aperture" value="0.072"/>
        <param name="num_selected" value="5"/>
    </node>

    <!-- IBVS Perception -->
    <param name="/ibvs_perception/cloud_topic" type="str" value="$(arg cloud_topic)"/>
    <param name="/ibvs_perception/filter_cloud_topic" type="str" value="$(arg filter_cloud_topic)"/>
    <param name="/ibvs_perception/grasp_topic" type="str" value="$(arg grasp_topic)"/>
    <param name="/ibvs_perception/camera_frame" type="str" value="$(arg camera_frame)"/>

    <group if="$(arg debug)">
        <include file="$(find ibvs_perception)/launch/ws_config.launch"/>
    </group>

    <node name="ibvs_yolo" pkg="ibvs_perception" type="yolo_bounder.py" output="screen"/>
    <node name="ibvs_grip" pkg="ibvs_perception" type="bestGrip.py" output="screen"/>
</launch>
